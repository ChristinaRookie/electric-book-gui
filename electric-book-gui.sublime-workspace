{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ClosePR",
				"ClosePRDialogResult\talias"
			],
			[
				"Mer",
				"MergeFileResolved\t Ɩ"
			],
			[
				"IndexFile",
				"IndexFileStatusAbbreviated\tstruct ʈ"
			],
			[
				"IndexFil",
				"IndexFileStatusAbbreviated\tstruct ʈ"
			],
			[
				"Index",
				"IndexFileStatusAbbreviated\tstruct ʈ"
			],
			[
				"re",
				"removeAttribute\tmethod"
			],
			[
				"is",
				"isWorkingDeleted\tmethod"
			],
			[
				"StagedF",
				"StagedFilesAbbreviated\t[]*IndexFileStatusAbbreviated, error ƒ"
			],
			[
				"remot",
				"remoteCloneURL\tstring ν"
			],
			[
				"path",
				"pathRepoDetail\tstring ƒ"
			],
			[
				"C",
				"CleanupConflictTemporaryFiles\terror ƒ"
			],
			[
				"color",
				"color-inverse-bg"
			],
			[
				"encodeURI",
				"encodeURIComponent\tfunction"
			],
			[
				"CommitM",
				"CommitMessageDialogResult\talias"
			],
			[
				"Found",
				"FoundationRevealDialogEvents\talias"
			],
			[
				"Set",
				"SetWorkingContent\tmethod"
			],
			[
				"Re",
				"RevertTheir\tvar"
			],
			[
				"FileList",
				"FileListDisplayEvent\tenum"
			],
			[
				"EBMC",
				"EBMChangesUnstaged\t Ɩ"
			],
			[
				"EMB",
				"EBMUnimplemented\t Ɩ"
			],
			[
				"EBM",
				"EBMBehind\t Ɩ"
			],
			[
				"Pare",
				"ParentNotExist\t Ɩ"
			],
			[
				"ErrNoGit",
				"ErrNoGithubParent\terror ν"
			],
			[
				"or",
				"originRepo"
			],
			[
				"config",
				"configPrintOrWeb"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "package git\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t// \"github.com/golang/glog\"\n\t\"github.com/google/go-github/github\"\n\tgit2go \"gopkg.in/libgit2/git2go.v25\"\n\n\t\"ebw/util\"\n)\n\n// PullRequest returns the pull request with the given number for the repo.\nfunc (r *Repo) PullRequest(number int) (*github.PullRequest, error) {\n\tpr, _, err := r.Client.Client.PullRequests.Get(r.Client.Context, r.RepoOwner, r.RepoName, number)\n\tif nil != err {\n\t\treturn nil, util.Error(err)\n\t}\n\treturn pr, nil\n}\n\n// PullRequestList returns a list of the PullRequests for this repo.\nfunc (r *Repo) PullRequestList() ([]*PullRequest, error) {\n\tprs, _, err := r.Client.Client.PullRequests.List(r.Client.Context, r.RepoOwner, r.RepoName,\n\t\t&github.PullRequestListOptions{\n\t\t\tListOptions: github.ListOptions{\n\t\t\t\tPage:    0,\n\t\t\t\tPerPage: 5000,\n\t\t\t},\n\t\t})\n\tif nil != err {\n\t\treturn nil, util.Error(err)\n\t}\n\tres := make([]*PullRequest, len(prs))\n\tfor i, pr := range prs {\n\t\tres[i] = &PullRequest{pr}\n\t}\n\treturn res, nil\n}\n\n// PullRequestFetch fetches the numbered pull request so that it can be\n// merged with the current repo.\nfunc (r *Repo) PullRequestFetch(number int) error {\n\tpr, err := r.PullRequest(number)\n\tif nil != err {\n\t\treturn err\n\t}\n\tremoteName := fmt.Sprintf(`_pull_request_%d`, number)\n\tif err := r.AddRemote(remoteName, pr.Head.Repo.GetCloneURL()); nil != err {\n\t\treturn err\n\t}\n\tif err := r.FetchRemote(remoteName); nil != err {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// PullRequestMerge merges the PR with the given number\n// with the HEAD of the current repo.\nfunc (r *Repo) PullRequestMerge(number int) error {\n\tpr, err := r.PullRequest(number)\n\tif nil != err {\n\t\treturn err\n\t}\n\n\t// We've now got the PR from GitHub, so we need to pull the\n\t// remote and the remote's relevant branch\n\n\t// DOES THIS NOT ASSUME THAT WE'VE GOT THE SHA IN OUR REPO FOR THE REMOTE\n\t// PR?\n\tprId, err := git2go.NewOid(pr.Head.GetSHA())\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\tprCommit, err := r.Repository.LookupAnnotatedCommit(prId)\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\tdefer prCommit.Free()\n\tif err := r.mergeAnnotatedCommit(prCommit); nil != err {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// PullRequestClose closes the given PR, with the merged indication and the given\n// message.\nfunc (r *Repo) PullRequestClose(number int, merged bool) error {\n\tclosedAt := time.Now()\n\tstate := `closed`\n\tif _, _, err := r.Client.PullRequests.Edit(r.Client.Context, r.RepoOwner, r.RepoName, number, &github.PullRequest{\n\t\tNumber:   &number,\n\t\tClosedAt: &closedAt,\n\t\tMerged:   &merged,\n\t\tState:    &state,\n\t}); nil != err {\n\t\treturn util.Error(err)\n\t}\n\treturn nil\n}\n\n// PullRequestCreate creates a new Pull Request from the user's repo to the\n// upstream repo.\n// In order to ensure that changes to the user's repo aren't propagated\n// with the PR, we branch at the point of PR creation.\nfunc (r *Repo) PullRequestCreate(title, notes string) error {\n\tbranchName, err := r.BranchCreate(``, false)\n\tif nil != err {\n\t\treturn err\n\t}\n\n\thead := fmt.Sprintf(`%s:%s`, user, branchName)\n\tbase := `master`\n\n\tupstream, err := r.GithubRepo()\n\n\tif nil != err {\n\t\treturn err\n\t}\n\tupstreamOwner := *upstream.Parent.Owner.Login\n\tupstreamName := *upstream.Parent.Name\n\n\tglog.Infof(`Creating new PR: title=%s, Head=%s, Base=%s, Body=%s, User=%s, Repo=%s`,\n\t\ttitle, head, base, notes, upstreamOwner, upstreamName)\n\t_, _, err = client.PullRequests.Create(client.Context,\n\t\tupstreamOwner, upstreamName,\n\t\t&github.NewPullRequest{\n\t\t\tTitle: &title,\n\t\t\tHead:  &head,\n\t\t\tBase:  &base,\n\t\t\t// Body:  &notes,\n\t\t})\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\n\treturn nil\n}\n",
			"file": "src/go/src/ebw/git/Repo_PullRequests.go",
			"file_size": 4697,
			"file_write_time": 131425603065408368,
			"settings":
			{
				"buffer_size": 3583,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/git/EBWRepoStatus.go",
			"settings":
			{
				"buffer_size": 1961,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/www/Webserver.go",
			"settings":
			{
				"buffer_size": 5479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/www/RepoConflictHandlers.go",
			"settings":
			{
				"buffer_size": 2563,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/git/GitTools.go",
			"settings":
			{
				"buffer_size": 16934,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "package git\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/golang/glog\"\n\t\"github.com/google/go-github/github\"\n\n\t\"ebw/config\"\n\t\"ebw/util\"\n)\n\n// ListPullRequests returns a list of the Pull Requests for the\n// given repoOwner/repoName\nfunc ListPullRequests(client *Client, repoOwner, repoName string) ([]*github.PullRequest, error) {\n\trequests, _, err := client.PullRequests.List(client.Context,\n\t\trepoOwner, repoName, &github.PullRequestListOptions{})\n\tif nil != err {\n\t\treturn nil, util.Error(err)\n\t}\n\treturn requests, nil\n}\n\nfunc GetPullRequest(client *Client, user, repoOwner, repoName string, number int) (*github.PullRequest, error) {\n\tpr, _, err := client.PullRequests.Get(client.Context, repoOwner, repoName, number)\n\treturn pr, err\n}\n\n// PullRequestDir returns the local git_cache location for the given pull request, or\n// if sha is an empty string, the root directory for all prrequest checkouts\nfunc PullRequestDir(sha string) (string, error) {\n\troot, err := os.Getwd()\n\tif nil != err {\n\t\treturn ``, util.Error(err)\n\t}\n\tprRoot := filepath.Join(root, config.Config.GitCache, `pr_requests`)\n\tif `` == sha {\n\t\treturn prRoot, nil\n\t}\n\treturn filepath.Join(prRoot, sha), nil\n}\n\n// PullRequestCheckout checks out the given\n// remoteUrl with given sha\nfunc PullRequestCheckout(client *Client, remoteUrl, sha string) (string, error) {\n\tremoteUrl, err := client.AddAuth(remoteUrl)\n\tif nil != err {\n\t\treturn ``, err\n\t}\n\tglog.Infof(`PullRequestCheckout(remote = %s, sha = %s)`, remoteUrl, sha)\n\tprRoot, err := PullRequestDir(``)\n\tos.MkdirAll(prRoot, 0755)\n\tprDir := filepath.Join(prRoot, sha)\n\t_, err = os.Stat(prDir)\n\tif nil == err {\n\t\t// Update from origin / master\n\t\tif err = runGitDir(prDir, []string{`pull`, `origin`, `master`}); nil != err {\n\t\t\treturn ``, err\n\t\t}\n\t} else {\n\t\tif !os.IsNotExist(err) {\n\t\t\treturn ``, util.Error(err)\n\t\t}\n\t\tglog.Infof(\"Going to clone %s\", remoteUrl)\n\t\tif err = runGitDir(prRoot, []string{`clone`, remoteUrl, sha}); nil != err {\n\t\t\treturn ``, err\n\t\t}\n\t}\n\n\tif err = gitConfig(client, prDir); nil != err {\n\t\treturn ``, err\n\t}\n\tif err = runGitDir(prDir, []string{`checkout`, sha}); nil != err {\n\t\treturn ``, err\n\t}\n\treturn prDir, nil\n}\n\nfunc PullRequestDiffListByNumber(client *Client, repoOwner, repoName string,\n\tprNumber int) ([]*PullRequestDiff, error) {\n\tpr, _, err := client.PullRequests.Get(client.Context, repoOwner, repoName, prNumber)\n\tif nil != err {\n\t\treturn nil, util.Error(err)\n\t}\n\treturn PullRequestDiffList(client, repoOwner, repoName, pr)\n}\n\nfunc PullRequestDiffList(client *Client, repoOwner, repoName string,\n\tpr *github.PullRequest) ([]*PullRequestDiff, error) {\n\tlocalPath, err := RepoDir(client.Username, repoOwner, repoName)\n\tif nil != err {\n\t\treturn nil, err\n\t}\n\tremotePath, err := PullRequestDir(pr.Head.GetSHA())\n\tif nil != err {\n\t\treturn nil, err\n\t}\n\tfiles, _, err := client.PullRequests.ListFiles(client.Context,\n\t\trepoOwner, repoName,\n\t\tpr.GetNumber(), &github.ListOptions{\n\t\t\tPerPage: 1000,\n\t\t})\n\tif nil != err {\n\t\treturn nil, util.Error(err)\n\t}\n\tdiffs := make([]*PullRequestDiff, len(files))\n\tfor i, p := range files {\n\t\tdiffs[i], err = GetPathDiff(localPath, remotePath, p.GetFilename())\n\t\tif nil != err {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn diffs, err\n}\n\n// PullRequestUpdate just updates the file in the 'master' repo the\n// same as editing in the regular system.\nfunc PullRequestUpdate(client *Client, user, repoOwner, repoName string,\n\tsha string, path string, content []byte) error {\n\treturn UpdateFile(client, user, repoOwner, repoName, path, content)\n\t// localPath, err := RepoDir(user, repo)\n\t// if nil != err {\n\t// \treturn err\n\t// }\n\t// if err := ioutil.WriteFile(filepath.Join(localPath, path), content, 0644); nil != err {\n\t// \treturn util.Error(err)\n\t// }\n\t// return nil\n}\n\nfunc PullRequestClose(client *Client, repoOwner, repoName string, number int) error {\n\tclosedAt := time.Now()\n\tmerged := true\n\tstate := `closed`\n\t_, _, err := client.PullRequests.Edit(client.Context, repoOwner, repoName, number, &github.PullRequest{\n\t\tNumber:   &number,\n\t\tClosedAt: &closedAt,\n\t\tMerged:   &merged,\n\t\tState:    &state,\n\t})\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\treturn nil\n}\n\n// PullRequestCreate creates a new Pull Request from the user's repo to the \n// upstream repo.\n// In order to ensure that changes to the user's repo aren't propagated \n// with the PR, we branch at the point of PR creation.\nfunc PullRequestCreate(client *Client, user, repoOwner, repoName, title, notes string) error {\n\thead := fmt.Sprintf(`%s:master`, user)\n\t// head := `master`\n\tbase := `master`\n\n\tupstream, _, err := client.Repositories.Get(client.Context, repoOwner, repoName)\n\tif nil != err {\n\t\treturn err\n\t}\n\tupstreamUser := *upstream.Parent.Owner.Login\n\tupstreamRepo := *upstream.Parent.Name\n\n\tglog.Infof(`Creating new PR: title=%s, Head=%s, Base=%s, Body=%s, User=%s, Repo=%s`,\n\t\ttitle, head, base, notes, upstreamUser, upstreamRepo)\n\t_, _, err = client.PullRequests.Create(client.Context,\n\t\tupstreamUser, upstreamRepo,\n\t\t&github.NewPullRequest{\n\t\t\tTitle: &title,\n\t\t\tHead:  &head,\n\t\t\tBase:  &base,\n\t\t\t// Body:  &notes,\n\t\t})\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\t// _, _, err := client.PullRequests.CreateComment(user,\n\t// \trepo, prNumber, &github.PullRequestComment{\n\t// \t\tComment: &notes,\n\t// \t})\n\treturn nil\n}\n\nfunc GithubCreatePullRequest(\n\tclient *Client,\n\tworkingDir string,\n\tremote string,\n\tupstreamBranch string,\n\ttitle, notes string) error {\n\tvar err error\n\tif `` == workingDir {\n\t\tworkingDir, err = os.Getwd()\n\t\tif nil != err {\n\t\t\treturn util.Error(err)\n\t\t}\n\t}\n\n\tlocalBranch, err := GitCurrentBranch(client, workingDir)\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\n\tsourceHead := fmt.Sprintf(`%s:%s`, client.Username, localBranch)\n\n\t// remote will default to 'origin'\n\t_, remoteRepo, err := GitRemoteRepo(workingDir, remote)\n\n\tupstream, _, err := client.Repositories.Get(client.Context,\n\t\tclient.Username, remoteRepo)\n\tif nil != err {\n\t\treturn err\n\t}\n\tupstreamUser := *upstream.Parent.Owner.Login\n\tupstreamRepo := *upstream.Parent.Name\n\n\tglog.Infof(`Creating new PR: title=%s, Head=%s, Base=%s, Body=%s, User=%s, Repo=%s`,\n\t\ttitle, sourceHead, upstreamBranch, notes, upstreamUser, upstreamRepo)\n\tpr, _, err := client.PullRequests.Create(client.Context,\n\t\tupstreamUser, upstreamRepo,\n\t\t&github.NewPullRequest{\n\t\t\tTitle: &title,\n\t\t\tHead:  &sourceHead,\n\t\t\tBase:  &upstreamBranch,\n\t\t\tBody:  &notes,\n\t\t})\n\tif nil != err {\n\t\treturn util.Error(err)\n\t}\n\tfmt.Printf(\"Created PR %d on %s/%s\\n\", *pr.Number, upstreamUser, upstreamRepo)\n\treturn nil\n}\n",
			"file": "src/go/src/ebw/git/PullRequests.go",
			"file_size": 6321,
			"file_write_time": 131425046239627603,
			"settings":
			{
				"buffer_size": 6523,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ts/RepoConflictPage.ts",
			"settings":
			{
				"buffer_size": 3480,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ts/conflict/MergingInfo.ts",
			"settings":
			{
				"buffer_size": 538,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ts/Context.ts",
			"settings":
			{
				"buffer_size": 1322,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/www/repoHandlers.go",
			"settings":
			{
				"buffer_size": 9357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/git/Repo.go",
			"settings":
			{
				"buffer_size": 36268,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/go/src/ebw/git/Remotes.go",
			"settings":
			{
				"buffer_size": 1181,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/craig/proj/ebw/electric-book-gui",
		"/home/craig/proj/ebw/electric-book-gui/examples",
		"/home/craig/proj/ebw/electric-book-gui/examples/merge-origin",
		"/home/craig/proj/ebw/electric-book-gui/public",
		"/home/craig/proj/ebw/electric-book-gui/src",
		"/home/craig/proj/ebw/electric-book-gui/src/go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/api",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/api/jsonrpc",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/cli",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/cli/config",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/util",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www",
		"/home/craig/proj/ebw/electric-book-gui/src/scss",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/pages",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/widgets",
		"/home/craig/proj/ebw/electric-book-gui/src/ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict",
		"/home/craig/proj/ebw/electric-book-gui/tools",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible"
	],
	"file_history":
	[
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/Repo.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/Templates.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/MergingInfo.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/repoHandlers.go",
		"/home/craig/proj/ebw/electric-book-gui/public/repo_conflict.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/ClosePRDialog.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/ClosePRDialog.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoConflictPage.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/Context.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/RepoConflictHandlers.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/Repo_PullRequests.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/test2/test.html",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/EBWRepoStatus.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/Webserver.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/util/Error.go",
		"/home/craig/proj/ebw/electric-book-gui/error-test.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/MergeFileResolutionState.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/IndexFileStatus.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/FileListDisplay.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/File.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/FileStatus.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/MergeEditor.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/api/JSONRpc.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/FileDisplay.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/pages/_repo_conflict.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/_colors.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/FileDisplay.html",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/ListFiles.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/Remotes.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/APIWs.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/GitRepo.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/MergeEditorControlBar.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/ResolveMergeOption.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/FileInfo.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/MergeFileInfo.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/cli/BookCommands.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/PullRequests.go",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/widgets/_toolbar_menu.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/ControlTag.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/FileTree.go",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/main.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/MergeInstructions.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/MergeInstructions.ts",
		"/home/craig/proj/ebw/electric-book-gui/public/img/file-folder-closed.svg",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/GitTools.go",
		"/home/craig/proj/ebw/electric-book-gui/public/img/file-folder-open.svg",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/widgets/_files_show_tag.scss",
		"/home/craig/proj/ebw/electric-book-gui/copytest.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/GitClient.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/PullRequest.go",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/pages/_new-editor.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoEditorPage.ts",
		"/home/craig/proj/ebw/electric-book-gui/public/repo_view.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/CommitMessageDialog.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/FoundationRevealDialog.ts",
		"/home/craig/proj/ebw/electric-book-gui/public/repo_detail.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/CommitMessageDialog.html",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/util/FileUtils.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/MergeController.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/gopkg.in/libgit2/git2go.v25/repository_mergeheads.go",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/widgets/_buttons.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/_forms.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/MergeEditor.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/FileList.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoEditorPage_NewFileDialog.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/EBW.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/FileListDisplay.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/AddNewBookDialog.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoMergeDialog.html",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoMergeDialog.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoMergeButton.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/RepoDetailPage.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/Context.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/conflict/LocalString.ts",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/RepoState.go",
		"/home/craig/proj/ebw/electric-book-gui/examples/merge-origin/run.sh",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/cli/util.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/WebPaths.go",
		"/home/craig/proj/gitquiz/git_quiz.bqf",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/GithubAuthLogin.go",
		"/home/craig/proj/ebw/electric-book-gui/public/landing.html",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/print/PrintLocal.go",
		"/home/craig/proj/ebw/electric-book-gui/public/pull_new.html",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/pages/_pull_new.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/cli/config/Config.go",
		"/home/craig/proj/ebw/electric-book-gui/public/_nav_main.html",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/www/GithubForking.go",
		"/home/craig/proj/ebw/electric-book-gui/build.sh",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/Status.go",
		"/home/craig/proj/ebw/electric-book-gui/examples/merge-origin/clear.sh",
		"/home/craig/.config/sublime-text-3/Packages/GoSublime/CHANGELOG.md",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/book/Config.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/print/Jekyll.go",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/electricbook/tasks/main.yml",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/bookworks/files/install-first-run.sh",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/bookworks/meta/main.yml",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/bookworks/tasks/main.yml",
		"/home/craig/proj/ebw/electric-book-gui/public/pull_request_view.html",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/electricbook/meta/main.yml",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/print/Endpoint.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/GitRepoDiff.go",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/haproxy/templates/haproxy.cfg.j2",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/rvm_io.ruby/defaults/main.yml",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/pages/_pull_request_view.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/PullRequestDiff.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/pr_files_changes_test.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/git/DirectoryEntry_test.go",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/PullRequestDiffList_File.html",
		"/home/craig/proj/ebw/electric-book-gui/public/repo_list.html",
		"/home/craig/.ebw.yml",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/roles/bookworks/defaults/main.yml",
		"/home/craig/proj/ebw/electric-book-gui/setup-dev.sh",
		"/home/craig/Desktop/FileZilla.xml",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/pages/repo_detail.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/scss/_layout-new.scss",
		"/home/craig/proj/ebw/electric-book-gui/src/ts/PrintListener.ts",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/playbook-bookworks.yml",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/print/PrintRequest.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/print/PrintInContainerCommand.go",
		"/home/craig/proj/ebw/electric-book-gui/src/go/src/ebw/print/PrintInContainer.go",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/hosts-demo.yml",
		"/home/craig/proj/ebw/electric-book-gui/tools/ansible/hosts-manage.yml",
		"/home/craig/.ssh/config",
		"/home/craig/.ssh/id_rsa",
		"/home/craig/.ssh/id_rsa.pub",
		"/home/craig/.ssh/known_hosts",
		"/home/craig/.ssh/authorized_keys"
	],
	"find":
	{
		"height": 47.0
	},
	"find_in_files":
	{
		"height": 129.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"PullRequestClose",
			"conflict_ClosePRDialog",
			"PullAbort",
			"panic",
			"this.ListenRPC",
			"StatusChanged",
			"Stage",
			"WriteEBWRepoStatu",
			"readEBWRepoStatus",
			"CopyOur",
			"SetTheir",
			"editLeft = ",
			"Cleanup",
			"Repo",
			"StatusList",
			".Path(",
			".Path",
			"Path(",
			"RepoDir",
			"repoDir",
			"RepoDir",
			"repoDir",
			"Push",
			"Update",
			"Commit",
			"UpdateFile",
			"RepoDetailPage",
			"RepoMergeDialog",
			"v.",
			"mergehead_ca",
			"Oid",
			"landingHandler",
			"/repos/",
			"/repo/",
			"util.Errorf",
			"regexp",
			"git.",
			"git2go",
			"GetJekyll",
			"Delete",
			"CreateFork",
			"PrintPdf"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"/repo/",
			"/repos/",
			"git2go.",
			"git"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/go/src/ebw/git/Repo_PullRequests.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3583,
						"regions":
						{
						},
						"selection":
						[
							[
								2604,
								2604
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 3269.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/go/src/ebw/git/EBWRepoStatus.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1961,
						"regions":
						{
						},
						"selection":
						[
							[
								470,
								470
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/go/src/ebw/www/Webserver.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5479,
						"regions":
						{
						},
						"selection":
						[
							[
								2589,
								2589
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 23.0,
						"translation.y": 1395.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/go/src/ebw/www/RepoConflictHandlers.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2563,
						"regions":
						{
						},
						"selection":
						[
							[
								727,
								727
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 945.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/go/src/ebw/git/GitTools.go",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 16934,
						"regions":
						{
						},
						"selection":
						[
							[
								7433,
								7433
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 7145.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/go/src/ebw/git/PullRequests.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6523,
						"regions":
						{
						},
						"selection":
						[
							[
								4158,
								4158
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4269.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/ts/RepoConflictPage.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3480,
						"regions":
						{
						},
						"selection":
						[
							[
								2466,
								2466
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false,
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 1302.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/ts/conflict/MergingInfo.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 538,
						"regions":
						{
						},
						"selection":
						[
							[
								532,
								532
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false,
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/ts/Context.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1322,
						"regions":
						{
						},
						"selection":
						[
							[
								1284,
								1284
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"translate_tabs_to_spaces": false,
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 650.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/go/src/ebw/www/repoHandlers.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9357,
						"regions":
						{
						},
						"selection":
						[
							[
								5067,
								5067
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7254.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/go/src/ebw/git/Repo.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36268,
						"regions":
						{
						},
						"selection":
						[
							[
								36268,
								36268
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 40578.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/go/src/ebw/git/Remotes.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1181,
						"regions":
						{
						},
						"selection":
						[
							[
								282,
								282
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 39.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 178.0
	},
	"pinned_build_system": "",
	"project": "electric-book-gui.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"PullRequestMerge",
				"PullRequestMerge"
			],
			[
				"AddRemote",
				"AddRemote"
			],
			[
				"FetchRemote",
				"FetchRemote"
			],
			[
				"ReadEBWRepoStatus",
				"ReadEBWRepoStatus"
			],
			[
				"RepoConf",
				"RepoConflictPage"
			],
			[
				"CommitFile",
				"CommitFile"
			],
			[
				"FileStatus",
				"FileStatus"
			],
			[
				"UpdateFile",
				"UpdateFile"
			]
		],
		"width": 1169.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 398.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
